[--CREDITS--]
PROGRAMMING:
	Engine           - Asmageddon
	Game             - Asmageddon

PROGRAMMING AID, HELP & ADVISE:
	Grumbel

GRAPHICS:
	/data/dngn.png   - stolen from DC Stone Soup
	/data/player.png - stolen from DC Stone Soup, modified a bit

DATA FILES:
	Everything       - Asmageddon



[--MODDING REFERENCE--]
1) To create a mod you have to create a new directory containing dngn.png and objects1.png graphics, tileset and objectset text files containing game data definitions.

2) Tileset editing:
*To modify graphics just change dngn.png file
*To edit tile definition edit tileset file, syntax is:

#TILE NUMBER#  (Can be any number, order doesn't really matter)
prop1=number value
prop2=text value
You can add any property, excessive ones will be saved into props dict, to invoke it's contets from within a script use tileDefinition[x].props["property name"]
Properties used directly by engine are:

collision   - defines collision mode:           , default=0
  0-NULL,   empty space, through this you will fall, only used for material none
  1-LIQUID, Swimming creatures/objects can swim in it, others will drown(or float...)
  2-FLOOR,  Floor, objects can be placed there, floor can suffer damage from explosives, mining or even heavy objects standing/walking on it
  3-WALL,   Wall, objects can't (usually) pass through it, can be destroyed
strength    - how hard is it to break a tile from state normal->damaged, from damaged->h. damaged, h. damaged->broken and from broken to destroy the tile completly, default=9999
strengthdec - how much strength required to break each next destruction level increases, percentage, default=0
name        - name of the tile, default=""
lemitR \
lemitG  |=  - Light emmision values for Red, Green and Blue colors, from 0 to 255, default=0
lemitB /
flammable   - Fire damage power required to incinerate this tile
transparency- how much it blocks light, from 0(opaque) to 16(100% transparent), default depends on collision mode(0 for NULL, LIQUID and FLOOR, 16 for WALL)
magic       - Magic emmision. Used for magic minimap(value from 0 to 255), default=0
remains     - Object that is left after complete destruction of the tile, default=""
breaks      - what tile the tile breaks into, default=0
dmg         - Damage it deals to objects, that (in case of wall) try to move to this tile, or (in case of liquid, floor) stand on this tile
dmgtype     - Type of damage
3) Objectset editing:
To Be Implemented





6) Programmer reference(for me only, as for now):
Move func mode param is sum of:
0  - Ignore all
1  - Actually move, otherwise just simulate collisions and/or damage
2  - Blocked by walls
4  - Blocked by liquid
8  - Blocked by floor
16 - Carefull, blocked by NULL material and all with dmg > 0 AND dmgtype that object is not completly resistant to
32 - Aggresive, attacks tile that it can not pass through
64 - Unused yet


[--KEYMAP REFERENCE--]
keys:
257-265 - NUMPAD numbers
13      - ENTER
27      - ESC
modifiers:
0       - this is default, no modifier, numpad is counted as no modifier as well
1       - left  shift
2       - right shift
64      - left  ctrl
128     - right ctrl
256     - left  alt
16384   - right alt
4096    - numpad, when number contains it it is automatically removed, so whetever numpad is pressed or not does not matter.
NOTE: modifier number is sum of all pressed keys.... 
NOTE: in configame.txt of your mod you can set monomodkeys to 1 to make both left and right modifier keys count as same modifier(usually left one)
NOTE: p keys can also be p1,p2,p3,p4,p5,etc. - these go only to specific player
NOTE: p keys can also be P1,P2,P3,P4,P5,etc. - then they go to specified player ALWAYS, even, when he is not active....
NOTE: object.move actions are different from player.move actions in the fact, that they are issued directly to object, with "aggro" and without "carefull" options....

NOTE: Control system is currently under development, so only few of control commands are implemented....

Usual keymap looks like: key,mod=type,action,prop
However you can specify an action to be no-repeat, so it only gets executed once when key gets pressed.

p - player keys, depends on mode - if user is in a menu these go to GUI, else to object, which focus is on:
player.move.ld
player.move.d
player.move.rd
player.move.l
player.wait
player.move.r
player.move.ul
player.move.u
player.move.ur
o - object keys, these go to object, which focus is on, object.act.ACTIONNAME issues the object a script action command:
object.act.ACTIONNAME.property.subprop
object.move.ld
object.move.d
object.move.rd
object.move.l
object.wait
object.move.r
object.move.ul
object.move.u
object.move.ur
i - interface keys, these always go to GUI:
gui.confirm
gui.cancel
g - game keys, these get checked by game:
game.exit
game.reload.tileset
game.reload.objectset
game.reload.all
game.debug.on
game.debug.off
game.debug.toggle
w - world keys, these are just like game keys, but are used to modify world:
world.regen

NOTE: The object.act is the only command with 4/5 sections - act makes object, which active player(s) focus is on do ACTIONNAME with property passed to props dict.
	property aside of anything else can be:
	target - makes player have to first target something if nothing is targeted, otherwise passes current target
	ftarget - makes player have to target something, even if he is already targeting something
	Fifth parameter is type and class of target
	subproperties of target:class and ftarget:class can be all possible classes of your objects, but few are predefined:
		object
		terrain
